#!/bin/sh
# ----------------------------------------------------------------------
# This script runs the project docker-compose framework.
#
# - The arguments to this script are passed to the browsertests service
#   as command override
#
# - Any environment variables set when calling this script are passed
#   through to the docker-compose framework
#   (e.g. configuration other than the defaults)
#
# OPTIONS:
# -c: Use the docker-compose CI environment with BROWSERTESTS_IMAGE
# -d: Use the docker-compose Dev environment with BROWSERTESTS_IMAGE
# -n: No Selenium browser in the docker-compose environment
# ----------------------------------------------------------------------

usage() {
  echo "Usage: $0 [-cdn] [CMD]"
}

err_exit() {
  local err_msg="$1"
  local err_code=$2
  echo "${err_msg}  --  Exit:[${err_code}]" 1>&2
  usage
  exit $err_code
}

# Exit script on any errors
set -e

# Handle options
while getopts ":cdn" options; do
  case "${options}" in
    c)
      echo "CI Environment"
      ci=true
      ;;
    d)
      echo "Development Environment"
      devenv=true
      ;;
    n)
      echo "No Selenium"
      noselenium=true
      ;;
    \?)
    err_exit "Invalid Option: -$OPTARG" 1
      ;;
  esac
done
shift $((OPTIND-1))

echo ''
echo "ENVIRONMENT VARIABLES..."
env
echo ''

echo 'DOCKER VERSION...'
docker --version
docker-compose --version
echo ''

# Override docker compose environments
echo 'DOCKER-COMPOSE COMMAND...'
docker_compose_command='docker-compose -f docker-compose.yml '

# Unless the no selenium option is set, use Selenium browser
if [ -z ${noselenium} ]; then
  echo "...Adding Selenium Browser to Environment"
  docker_compose_command="${docker_compose_command} -f docker-compose.selenium.yml "
  if [[ `uname -m` == "arm64" ]]; then
    echo "...Apple Silicon Detected adding Seleniarm Browser Override to Environment"
    docker_compose_command="${docker_compose_command} -f docker-compose.seleniarm.yml "
  fi
fi

if [ ! -z ${ci} ]; then
  echo "...Using CI Environment with Image [${BROWSERTESTS_IMAGE}]"
  docker_compose_command="${docker_compose_command} -f docker-compose.ci.yml "
fi

if [ ! -z ${devenv} ]; then
  echo "...Using Development Environment with Image [${BROWSERTESTS_IMAGE}]"
  docker_compose_command="${docker_compose_command} -f docker-compose.dev.yml "
fi
echo "...COMMAND: [${docker_compose_command}]"
echo ''

echo 'DOCKER-COMPOSE CONFIGURATION...'
$docker_compose_command config
echo ''

echo 'DOCKER-COMPOSE PULLING...'
set +e
$docker_compose_command pull
echo '...Allowing pull errors (for local images)'
set -e
echo ''

echo 'DOCKER IMAGES...'
docker images
echo ''

echo "DOCKER-COMPOSE RUNNING [$@]..."
# Allow to fail but catch return code
set +e
$docker_compose_command run browsertests "$@"
run_return_code=$?
# NOTE return code must be caught before any other command
set -e
echo ''

if [ $run_return_code -eq 0 ]; then
    run_disposition='PASSED'
else
    run_disposition='FAILED'
fi
echo "...RUN [${run_disposition}] WITH RETURN CODE [${run_return_code}]"
echo ''

echo 'DOCKER-COMPOSE DOWN...'
$docker_compose_command down
echo ''

echo "EXITING WITH ${run_disposition} RUN RETURN CODE ${run_return_code}"
exit $run_return_code
