#!/bin/sh

# -----------------------------------------------
# Project run script to run
#   - lint
#   - secscan
#   - tests
#   - or it runs all arguments
# -----------------------------------------------

# --- Functions ---
run_and_exit_return_code () {
  # Exit script on any errors
  set -e

  # Set to all positional parameters each expanding
  # to a separate word
  command_to_run="$@"
  if [ -z "$command_to_run" ]; then
    echo "ERROR: Function requires a command argument (86)"
    exit 86
  fi

  # Run the command and preserve exit code
  echo "RUNNING [${command_to_run} ]..."
  # Allow to fail but catch return code
  set +e
  $command_to_run
  run_return_code=$?
  # NOTE return code must be caught before any other command
  set -e
  echo ''

  echo "EXITING WITH RUN RETURN CODE [${run_return_code}]"
  exit $run_return_code
}

wait_until_ready_if_remote_browser() {
  # Assumes curl
  if [ ! -z "${REMOTE_STATUS}" ];
  then
    COUNTER=0
    echo "Waiting for remote browser at [${REMOTE_STATUS}] to become available"
    until curl -fsSL "${REMOTE_STATUS}" >/dev/null 2>&1; do
      printf "."
      sleep 1
      COUNTER=$((COUNTER + 1))
      if [ $COUNTER -eq 30 ] ; then
        echo "✘"
        echo "ERROR: Timed out waiting for remote browser (99)"
        exit 99
      fi
    done
    echo "✔"
  fi
}

# Unfortunately dotnet list package --vulnerable returns
# a 0 (passing) return code when vulnerabilities
run_dotnet_list_package_scan_output_for_vuln() {
  run_command="dotnet restore"
  echo "RUNNING [${run_command} ]"
  $run_command

  run_command="dotnet list package --vulnerable --include-transitive $@"
  echo "RUNNING [${run_command} ] AND SCANNING OUTPUT WHICH WILL NOT BE SEEN..."
  $run_command | grep -q 'has no vulnerable packages given the current sources' && passed=true

  echo "...Passed=[${passed}]"
  if [ ! -z ${passed} ]; then
    echo "RUN PASSED"
    run_return_code=0
  else
    run_return_code=86
    echo "RUN FAILED!!! - RE-RUNNING [${run_command} ] WITH OUTPUT..."
    set +e
    $run_command
    rc=$?
    set -e
    echo ''
    echo "RE-RUN RETURN CODE [${rc}]..."
  fi

  echo "EXITING WITH RUN RETURN CODE [${run_return_code}]"
  exit $run_return_code
}

# ------------
# --- MAIN ---
# ------------
# Exit script on any errors
set -e

# Run any recognized actions
action="${1}"
case "$action" in
  "lint")
    shift
    recognized_action=1
    run_and_exit_return_code "dotnet format --verify-no-changes $@"
  ;;

  "secscan")
    shift
    recognized_action=1
    run_dotnet_list_package_scan_output_for_vuln
  ;;

  "tests")
    shift
    recognized_action=1
    wait_until_ready_if_remote_browser
    # Run the tests (with any passed in args) and log to stdout the progress
    run_and_exit_return_code dotnet test --logger "console;verbosity=detailed" "$@"
  ;;
esac

# Still here, then either not a recognized action or ???
if [ -z "$recognized_action" ]; then
  # No recognized actions so run all the arguments as the command"
  run_and_exit_return_code "$@"
else
  echo "ERROR: should have exited!!! (99)"
  exit 99
fi
