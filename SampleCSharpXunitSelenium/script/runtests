#!/bin/sh
# This orchestration assumes a (Selenium) status route
# that indicates the remote browser is up and ready,
# otherwise it runs a local browser.
#
# Requires curl command (present in dotnet-sdk y macOS)

if [ ! -z "${REMOTE_STATUS}" ];
then
  COUNTER=0
  echo "Waiting for ${REMOTE_STATUS} to become available"
  until curl -fsSL "${REMOTE_STATUS}" >/dev/null 2>&1; do
    printf "."
    sleep 1
    COUNTER=$((COUNTER + 1))
    if [ $COUNTER -eq 30 ] ; then
      echo "✘"
      exit 1
    fi
  done
  echo "✔"
fi

# Run the tests (with any passed in args)
# Use the trx logger
#dotnet test --logger trx -r ../data --verbosity normal "$@"
# Log to stdout with progress of tests
dotnet test --logger "console;verbosity=detailed" "$@"
